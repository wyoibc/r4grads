axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()
)
})
markerGenes  <- c(
"CD34",  #Early Progenitor
"GATA1", #Erythroid
"PAX5", "MS4A1", "MME", #B-Cell Trajectory
"CD14", "MPO", #Monocytes
"CD3D", "CD8A"#TCells
)
p <- plotEmbedding(
ArchRProj = proj,
colorBy = "GeneScoreMatrix",
name = markerGenes,
embedding = "UMAP",
imputeWeights = getImputeWeights(proj)
)
p2 <- lapply(p, function(x){
x + guides(color = FALSE, fill = FALSE) +
theme_ArchR(baseSize = 6.5) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm")) +
theme(
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()
)
})
do.call(cowplot::plot_grid, c(list(ncol = 3),p2))
p$CD14
library(ArchR)
rm(list=ls())
library(ArchR)
addArchRThreads(threads = 1)
inputFiles <- getTutorialData("Hematopoiesis")
inputFiles
addArchRGenome("hg19")
ArrowFiles <- createArrowFiles(
inputFiles = inputFiles,
sampleNames = names(inputFiles),
minTSS = 4, #Dont set this too high because you can always increase later
minFrags = 1000,
addTileMat = TRUE,
addGeneScoreMat = TRUE
)
proj <- ArchRProject(
ArrowFiles = ArrowFiles,
outputDirectory = "HemeTutorial",
copyArrows = TRUE #This is recommened so that you maintain an unaltered copy for later usage.
)
DoubletEnrichment <- addDoubletScores(
input = ArrowFiles,
k = 10, #Refers to how many cells near a "pseudo-doublet" to count.
knnMethod = "UMAP", #Refers to the embedding to use for nearest neighbor search.
LSIMethod = 1
)
proj <- filterDoublets(ArchRProj = proj)
addArchRThreads(threads = 6)
proj <- addIterativeLSI(ArchRProj = proj, useMatrix = "TileMatrix", name = "IterativeLSI")
proj <- addClusters(input = proj, reducedDims = "IterativeLSI")
proj <- addUMAP(ArchRProj = proj, reducedDims = "IterativeLSI")
plotEmbedding(ArchRProj = proj, colorBy = "cellColData", name = "Clusters", embedding = "UMAP")
markerGenes  <- c(
"CD34",  #Early Progenitor
"GATA1", #Erythroid
"PAX5", "MS4A1", "MME", #B-Cell Trajectory
"CD14", "MPO", #Monocytes
"CD3D", "CD8A"#TCells
)
p <- plotEmbedding(
ArchRProj = proj,
colorBy = "GeneScoreMatrix",
name = markerGenes,
embedding = "UMAP",
imputeWeights = getImputeWeights(proj)
)
p2 <- lapply(p, function(x){
x + guides(color = FALSE, fill = FALSE) +
theme_ArchR(baseSize = 6.5) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm")) +
theme(
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()
)
})
do.call(cowplot::plot_grid, c(list(ncol = 3),p2))
p
set.seed(1)
addArchRThreads(threads = 1)
inputFiles <- getTutorialData("Hematopoiesis")
inputFiles
addArchRGenome("hg19")
ArrowFiles <- createArrowFiles(
inputFiles = inputFiles,
sampleNames = names(inputFiles),
minTSS = 4, #Dont set this too high because you can always increase later
minFrags = 1000,
addTileMat = TRUE,
addGeneScoreMat = TRUE
)
proj <- ArchRProject(
ArrowFiles = ArrowFiles,
outputDirectory = "HemeTutorial",
copyArrows = TRUE #This is recommened so that you maintain an unaltered copy for later usage.
)
DoubletEnrichment <- addDoubletScores(
input = ArrowFiles,
k = 10, #Refers to how many cells near a "pseudo-doublet" to count.
knnMethod = "UMAP", #Refers to the embedding to use for nearest neighbor search.
LSIMethod = 1
)
proj <- filterDoublets(ArchRProj = proj)
addArchRThreads(threads = 6)
proj <- addIterativeLSI(ArchRProj = proj, useMatrix = "TileMatrix", name = "IterativeLSI")
proj <- addClusters(input = proj, reducedDims = "IterativeLSI")
proj <- addUMAP(ArchRProj = proj, reducedDims = "IterativeLSI")
plotEmbedding(ArchRProj = proj, colorBy = "cellColData", name = "Clusters", embedding = "UMAP")
markerGenes  <- c(
"CD34",  #Early Progenitor
"GATA1", #Erythroid
"PAX5", "MS4A1", "MME", #B-Cell Trajectory
"CD14", "MPO", #Monocytes
"CD3D", "CD8A"#TCells
)
p <- plotEmbedding(
ArchRProj = proj,
colorBy = "GeneScoreMatrix",
name = markerGenes,
embedding = "UMAP",
imputeWeights = getImputeWeights(proj)
)
p2 <- lapply(p, function(x){
x + guides(color = FALSE, fill = FALSE) +
theme_ArchR(baseSize = 6.5) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm")) +
theme(
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()
)
})
do.call(cowplot::plot_grid, c(list(ncol = 3),p2))
do.call(cowplot::plot_grid, c(list(ncol = 3),p2))
grid::grid.newpage()
grid::grid.draw(p$CD14)
p
p <- plotBrowserTrack(
ArchRProj = proj,
groupBy = "Clusters",
geneSymbol = markerGenes,
upstream = 50000,
downstream = 50000
)
grid::grid.newpage()
grid::grid.draw(p$CD14)
markersGS <- getMarkerFeatures(
ArchRProj = proj,
useMatrix = "GeneScoreMatrix",
groupBy = "Clusters",
bias = c("TSSEnrichment", "log10(nFrags)"),
testMethod = "wilcoxon"
)
markersGS
markerList.Cluster.markers <- getMarkers(Cluster.markers, cutOff = "FDR <= 0.05 & abs(Log2FC) > 0.2")
markersGS <- getMarkerFeatures(
ArchRProj = proj,
useMatrix = "GeneScoreMatrix",
groupBy = "Clusters",
bias = c("TSSEnrichment", "log10(nFrags)"),
testMethod = "wilcoxon"
)
markerList.Cluster.markers <- getMarkers(markersGS, cutOff = "FDR <= 0.05 & abs(Log2FC) > 0.2")
markerList.Cluster.markers
geneids_clusters <- lapply(markers_clusters, function(x) x$name)
markers_clusters <- markersGS
markerList.Cluster.markers <- getMarkers(markers_clusters, cutOff = "FDR <= 0.05 & abs(Log2FC) > 0.2")
geneids_clusters <- lapply(markers_clusters, function(x) x$name)
geneids_clusters
cluster_markers <- getMarkerFeatures(
ArchRProj = proj,
useMatrix = "GeneScoreMatrix",
groupBy = "Clusters",
bias = c("TSSEnrichment", "log10(nFrags)"),
testMethod = "wilcoxon"
)
markerList.Cluster.markers <- getMarkers(cluster_markers, cutOff = "FDR <= 0.05 & abs(Log2FC) > 0.2")
markerList.Cluster.markers
markers_clusters <- lapply(markerList.Cluster.markers, function(x) x)
markers_clusters
markerList.Cluster.markers <- getMarkers(cluster_markers, cutOff = "FDR <= 0.05 & Log2FC > 0.2")
markers_clusters <- lapply(markerList.Cluster.markers, function(x) x)
markers_clusters
geneids_clusters <- lapply(markers_clusters, function(x) x$name)
geneids_clusters
up_genes <- lapply(geneids_clusters, function(x) AnnotationDbi::select(org.Mm.eg.db, keys=x, columns="ENTREZID", keytype="SYMBOL")$ENTREZID)
library(org.Mm.eg.db)
library(AnnotationDbi)
up_genes <- lapply(geneids_clusters, function(x) AnnotationDbi::select(org.Mm.eg.db, keys=x, columns="ENTREZID", keytype="SYMBOL")$ENTREZID)
up_genes <- lapply(geneids_clusters, function(x) AnnotationDbi::select(org.Hs.eg.db, keys=x, columns="ENTREZID", keytype="SYMBOL")$ENTREZID)
library(org.Hs.eg.db)
BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)
library(AnnotationDbi)
up_genes <- lapply(geneids_clusters, function(x) AnnotationDbi::select(org.Hs.eg.db, keys=x, columns="ENTREZID", keytype="SYMBOL")$ENTREZID)
up_genes
geneids_clusters
geneids_clusters[[1]]
names(geneids_clusters)
write.csv(geneids_clusters$C1, file="genes_C1.csv")
getwd()
library(edgeR)
library(pheatmap)
gene_count <- read.csv("gene_count_matrix.csv")
3+3
3^88
3+3
3+3
# load libraries
library(DESeq2)
library(clusterProfiler)
?search_kegg_organism
search_kegg_organism('alternaria', by='scientific_name')
search_kegg_organism('Alternaria', by='scientific_name')
search_kegg_organism('Alternaria alternata', by='scientific_name')
search_kegg_organism('Alternaria alternata', by='scientific_name')
search_kegg_organism('Alternaria alternata', by='scientific_name', ignore.case = TRUE)
search_kegg_organism('aalt', by='kegg.code', ignore.case = TRUE)
search_kegg_organism('aalt', by='kegg_code', ignore.case = TRUE)
search_kegg_organism('ece', by='kegg_code')
data(geneList, package="DOSE")
gene <- names(geneList)[abs(geneList) > 2]
gene
kk <- enrichKEGG(gene         = gene,
organism     = 'hsa',
pvalueCutoff = 0.05)
kk <- enrichKEGG(gene         = gene,
organism     = 'aalt',
pvalueCutoff = 0.05)
gene <- c("CC77DRAFT_951586", "CC77DRAFT_1030375", "CC77DRAFT_1060376", "CC77DRAFT_1060977", "CC77DRAFT_428484")
kk <- enrichKEGG(gene         = gene,
organism     = 'aalt',
pvalueCutoff = 0.05)
head(kk)
?gseKEGG
data(geneList, package="DOSE")
geneList
str(geneList)
head(geneList)
tail(geneList)
length(geneList)
# This will take a gene list with log fold change values and use that for KEGG analysis - doing it here for human with exampel data
data(geneList, package="DOSE")
kk2 <- gseKEGG(geneList     = geneList,
organism     = 'hsa',
minGSSize    = 120,
pvalueCutoff = 0.05,
verbose      = FALSE)
head(kk2)
browseKEGG(kk, 'aalt')
kk
browseKEGG(kk, 'aalt')
browseKEGG(kk, 'aalt00450')
library("pathview")
BiocManager::install("pathview")
install.packages("gert")
install.packages("gert")
BiocManager::install("pathview")
library(pathview)
## Using a full gene list with logfc - here again going back to human example data
hsa04110 <- pathview(gene.data  = geneList,
pathway.id = "hsa04110",
species    = "hsa",
limit      = list(gene=max(abs(geneList)), cpd=1))
3408644/4393029
library(adegenet)
library(LEA)
library(plotrix)
library(mapdata)
library(rworldmap)
library(vcfR)
library(fossil)
library(MASS)
args(find.clusters)
arguments(find.clusters)
args(find.clusters)
find.clusters
find.clusters()
?find.clusters
quit()
### load up relevant packages
library(adegenet)
library(LEA)
library(plotrix)
library(mapdata)
library(rworldmap)
?map
library(versions)
install.versions("gdm", "1.5.0-1")
liubrary(devtools)
library(devtools)
install_version("gdm", version = "1.5.0-1",repos = "https://cran.r-project.org/src/contrib/Archive/gdm/gdm_1.5.0-1.tar.gz")
install_version("gdm", version = "1.5.0-1",repos = "https://cran.r-project.org/")
pkgbuild::check_build_tools(debug = TRUE)
devtools::load_all()
install.packages("remotes")
install.packages("remotes")
install_version("gdm", version = "1.5.0-1",repos = "https://cran.r-project.org/")
library(devtools)
install_version("gdm", version = "1.5.0-1",repos = "https://cran.r-project.org/")
install.packages("~/Desktop/gdm_1.5.0-1.tar.gz", repos = NULL, type = "source")
####################################################################################################
#
# Part 4: make each run a list of vectors,
# sequences that are temporally close to eachother will overwrite the before or after sequence
#####################################################################################################
#Define number of rows you want before and after the zero-centered graph
after <- 3
before <- 1
#made up data
df <- data.frame(
state =      c("A","A","A","A","A","B","A","A","X","Y","Z","A","A","A","B","A","B","A","A"),
start =      c("start","NA","NA","NA","NA","NA","start","NA","NA","NA","NA","start","NA","NA","NA","start","NA","start","NA"),
rleGroup =   c("1","1","1","1","1","2","3","3","4","5","6","7","7","7","8","9","10","11","11"),
data = runif(19)
)
df <- df %>% tidyr::unite(stateStart, c(state,start), sep = ".", remove = FALSE)
df
####################################################################################################
#
# Part 4: make each run a list of vectors,
# sequences that are temporally close to eachother will overwrite the before or after sequence
#####################################################################################################
#Define number of rows you want before and after the zero-centered graph
after <- 3
before <- 1
#made up data
df <- data.frame(
state =      c("A","A","A","A","A","B","A","A","X","Y","Z","A","A","A","B","A","B","A","A"),
start =      c("start","NA","NA","NA","NA","NA","start","NA","NA","NA","NA","start","NA","NA","NA","start","NA","start","NA"),
rleGroup =   c("1","1","1","1","1","2","3","3","4","5","6","7","7","7","8","9","10","11","11"),
data = runif(19)
)
df <- df %>% tidyr::unite(stateStart, c(state,start), sep = ".", remove = FALSE)
library(tidyverse)
####################################################################################################
#
# Part 4: make each run a list of vectors,
# sequences that are temporally close to eachother will overwrite the before or after sequence
#####################################################################################################
#Define number of rows you want before and after the zero-centered graph
after <- 3
before <- 1
#made up data
df <- data.frame(
state =      c("A","A","A","A","A","B","A","A","X","Y","Z","A","A","A","B","A","B","A","A"),
start =      c("start","NA","NA","NA","NA","NA","start","NA","NA","NA","NA","start","NA","NA","NA","start","NA","start","NA"),
rleGroup =   c("1","1","1","1","1","2","3","3","4","5","6","7","7","7","8","9","10","11","11"),
data = runif(19)
)
df <- df %>% tidyr::unite(stateStart, c(state,start), sep = ".", remove = FALSE)
df
#extract the rows before and after the onset of a particular state
extract.with.context <- function(x, colname, rows, after = 0, before = 0) {
match.idx  <- which(x[[colname]] %in% rows)
span       <- seq(from = -before, to = after)
extend.idx <- c(outer(match.idx, span, `+`))
extend.idx <- Filter(function(i) i > 0 & i <= nrow(x), extend.idx)
extend.idx <- sort(unique(extend.idx))
return(x[extend.idx, , drop = FALSE])
}
extracted.df = extract.with.context(x=df, colname="stateStart", rows=c("A.start"), after = after, before = before)
extracted.df
extracted.df
df
dev.off()
knitr::opts_chunk$set(echo = TRUE)
library(mapdata)
library(rworldmap)
library(leaflet)
library(htmlwidgets)
library(ggplot2)
library(scatterpie)
?map
maps::map("worldHires", "Mexico", xlim=c(-125,-65), ylim=c(23,53),col="gray90", fill=TRUE)
mapdata::map("worldHires", "Mexico", xlim=c(-125,-65), ylim=c(23,53),col="gray90", fill=TRUE)
maps::map("worldHires", "Mexico", xlim=c(-125,-65), ylim=c(23,53),col="gray90", fill=TRUE)
maps::map("state", xlim=c(-125,-65), ylim=c(23,53), add=TRUE,col="gray90", fill=TRUE)
maps::map("worldHires", "Mexico", xlim=c(-125,-65), ylim=c(23,53),col="gray90", fill=TRUE)
maps::map("state", xlim=c(-125,-65), ylim=c(23,53), add=TRUE,col="gray90", fill=TRUE)
# load up relevant packages
library(adegenet)
library(gdm)
devtools::install_github("fitzLab-AL/gdm")
devtools::install_github("fitzLab-AL/gdm")
?split
1:2066
num_rows <- 1:2066
num_rows <- 1:2066
# specify the chunk length as 5
chunklength=415
# split the num_rows into chunks of 415
print(split(num_rows,ceiling(seq_along(num_rows) / chunklength)))
# split the num_rows into chunks of 415
chunks <- print(split(num_rows,ceiling(seq_along(num_rows) / chunklength)))
chunks
sapply(chunks, length)
knitr::opts_chunk$set(echo = TRUE)
3+3
![new script](new_script.png){#id .class width=45% height=45%}\
3+7
3+7 # addition
```{r}
3+7 # addition
5-23 # subtraction
86*63  # multiplication
33/11 # division
4^2 # exponents
?log
log(10)
log(10, base = 10)
?log()
log(10, base = 10)
three <- 3
three
?num
num
num <- 3
num <- 3
The object named `num` now contains the value 3. We can execute the object in the console to see what it contains and confirm that it's 3:
```{r}
num
80-num
num_2 <- 9*256
num_2 <- 9*256
num_2 <- 9*256
num_3 <- num + num_2
num_4 <- log(num_3)
num_2 <- 9*256
num_3 <- num + num_2
num_4 <- log(num_3)
exp <- 7
exp()
?exp
exp(4)
some_text <- "character string"
sometruefalse <- TRUE
monthsC <- c(January, "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
monthsC
monthsC <- c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
monthsC
months2 <- 1:12  # the colon between 2 numbers will make a series of numbers
months2
months <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
months
monthsC <- c(January, "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
year <- data.frame(months, monthsC)
year
class(year)
year
M <- matrix(c(3:14), nrow = 4, byrow = TRUE)
M
list1
list1 <- list("RED", 99, "table", 165)
list1
list2 <- list(list1, M, monthsC, 745, "GREEN")
list2
getwd()
getwd
setwd("~/Desktop") # set the working directory to the desktop
year
write.csv(year)
write.csv(year, file = "year.csv")
years2 <- read.csv(year.csv)
write.csv(year, file = "year.csv")
years2 <- read.csv("year.csv")
years2
years2 <- read.csv("year.csv")
getwd()
setwd("~")
years3 <- read.csv("year.csv") # this fails
years3 <- read.csv("/Users/harrington/r4grads/Module_1/year.csv")
install.packages("adegenet")
?adegenet
library(adegenet)
library("adegenet")
?adegenet
install.packages("devtools")
library(devtools)
install_github("liamrevell/phytools")
install.packages(ape)
install.packages("ape")
install.packages("ape")
knitr::opts_chunk$set(echo = TRUE)
install_github("liamrevell/phytools") # this is the development version of phytools, a package for phylogenetics
library(devtools)
install_github("liamrevell/phytools") # this is the development version of phytools, a package for phylogenetics
install.packages("BiocManager") # install BiocManager from CRAN
install.packages("BiocManager") # install BiocManager from CRAN
BiocManager::install("DESeq2") # install DESeq2 from Bioconductor
install.packages("BiocManager") # install BiocManager from CRAN
BiocManager::install("DESeq2") # install DESeq2 from Bioconductor
knitr::opts_chunk$set(echo = TRUE)
BiocManager::install("DESeq2") # install DESeq2 from Bioconductor
